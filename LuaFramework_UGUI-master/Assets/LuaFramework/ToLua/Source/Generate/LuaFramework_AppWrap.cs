//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LuaFramework_AppWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(LuaFramework.App), typeof(System.Object));
		L.RegFunction("AddManager", AddManager);
		L.RegFunction("RemoveManager", RemoveManager);
		L.RegFunction("New", _CreateLuaFramework_App);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Instance", get_Instance, null);
		L.RegVar("LuaManager", get_LuaManager, null);
		L.RegVar("UIManager", get_UIManager, null);
		L.RegVar("UpdateManager", get_UpdateManager, null);
		L.RegVar("ResourceManager", get_ResourceManager, null);
		L.RegVar("ObjectPoolManager", get_ObjectPoolManager, null);
		L.RegVar("AtlasManager", get_AtlasManager, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateLuaFramework_App(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				LuaFramework.App obj = new LuaFramework.App();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: LuaFramework.App.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddManager(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			LuaFramework.App obj = (LuaFramework.App)ToLua.CheckObject<LuaFramework.App>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			object arg1 = ToLua.ToVarObject(L, 3);
			obj.AddManager(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveManager(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaFramework.App obj = (LuaFramework.App)ToLua.CheckObject<LuaFramework.App>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.RemoveManager(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, LuaFramework.App.Instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LuaManager(IntPtr L)
	{
		try
		{
			ToLua.Push(L, LuaFramework.App.LuaManager);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UIManager(IntPtr L)
	{
		try
		{
			ToLua.Push(L, LuaFramework.App.UIManager);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UpdateManager(IntPtr L)
	{
		try
		{
			ToLua.Push(L, LuaFramework.App.UpdateManager);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ResourceManager(IntPtr L)
	{
		try
		{
			ToLua.Push(L, LuaFramework.App.ResourceManager);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ObjectPoolManager(IntPtr L)
	{
		try
		{
			ToLua.Push(L, LuaFramework.App.ObjectPoolManager);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AtlasManager(IntPtr L)
	{
		try
		{
			ToLua.Push(L, LuaFramework.App.AtlasManager);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

